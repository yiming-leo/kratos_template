package redis

import (
	"fmt"
	"github.com/go-kratos/kratos/v2/errors"
	"github.com/go-kratos/kratos/v2/log"
	"kratos_test/internal/conf"
	"net/url"
)

func NewRedis(conf *conf.Data, logger log.Logger) (Redis, error) {
	redisUrl := url.URL{
		Scheme: "redis",
		Host:   conf.Redis.Addr,
		Path:   "0",
		User:   url.UserPassword(conf.Redis.Username, conf.Redis.Password),
	}
	rdb, err := GetRedisInstance(redisUrl.String())
	if err != nil {
		return nil, err
	}

	return &redis{
		log:      log.NewHelper("Redis", logger),
		instance: rdb,
	}, nil
}

var instances = make(map[string]*RedisInstance)

// redis://<user>:<pass>@localhost:6379/<db>
func GetRedisInstance(connUrl string) (*RedisInstance, error) {
	opt, err := redisLib.ParseURL(connUrl)
	if err != nil {
		return nil, errors.Errorf(err, errors.ErroRedisParseUrlFailed)
	}

	instanceKey := fmt.Sprintf(INSTANCE_FMT, opt.Addr, opt.DB)
	if inst, existed := instances[instanceKey]; existed {
		return inst, nil
	}

	instance := connect(opt)
	instances[instanceKey] = &RedisInstance{
		Redis:     instance,
		RedisLock: redislock.New(instance),
	}

	return instances[instanceKey], nil
}

func connect(options *redisLib.Options) *redisLib.Client {
	rdb := redisLib.NewClient(options)
	return rdb
}
